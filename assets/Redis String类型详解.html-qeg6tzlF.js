import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,i as n,o as t}from"./app-3Mnxf--_.js";const l={};function h(e,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="redis基础数据类型-一-string详解" tabindex="-1"><a class="header-anchor" href="#redis基础数据类型-一-string详解"><span>Redis基础数据类型（一）String详解</span></a></h1><h2 id="string概述" tabindex="-1"><a class="header-anchor" href="#string概述"><span>String概述</span></a></h2><p>Redis没有使用C语言原生的字符串，而是自定义了一种SDS（Simple Dynamic String）的数据结构。<br> 结构如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> __attribute__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__packed__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) sdshdr8 {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint8_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* used */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint8_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> alloc;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* excluding the header and null terminator */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flags;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* 3 lsb of type, 5 unused bits */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> buf</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> __attribute__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__packed__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) sdshdr16 {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint16_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* used */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint16_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> alloc;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* excluding the header and null terminator */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flags;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* 3 lsb of type, 5 unused bits */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> buf</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> __attribute__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__packed__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) sdshdr32 {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* used */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> alloc;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* excluding the header and null terminator */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flags;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* 3 lsb of type, 5 unused bits */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> buf</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> __attribute__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__packed__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) sdshdr64 {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* used */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> alloc;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* excluding the header and null terminator */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    unsigned</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flags;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* 3 lsb of type, 5 unused bits */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> buf</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SDS的主要特点：</p><ol><li>初始化大小</li><li>测试成功啦</li></ol><h2 id="string数据结构" tabindex="-1"><a class="header-anchor" href="#string数据结构"><span>String数据结构</span></a></h2><h2 id="string命令列表" tabindex="-1"><a class="header-anchor" href="#string命令列表"><span>String命令列表</span></a></h2><h2 id="string应用场景" tabindex="-1"><a class="header-anchor" href="#string应用场景"><span>String应用场景</span></a></h2><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,10)]))}const d=s(l,[["render",h],["__file","Redis String类型详解.html.vue"]]),r=JSON.parse('{"path":"/backend/redis/Redis%20String%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html","title":"Redis基础数据类型（一）String详解","lang":"zh-CN","frontmatter":{"description":"Redis基础数据类型（一）String详解 String概述 Redis没有使用C语言原生的字符串，而是自定义了一种SDS（Simple Dynamic String）的数据结构。 结构如下： SDS的主要特点： 初始化大小 测试成功啦 String数据结构 String命令列表 String应用场景 参考文档","head":[["meta",{"property":"og:url","content":"https://njustlcx.github.io/veins/veins/backend/redis/Redis%20String%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Veins"}],["meta",{"property":"og:title","content":"Redis基础数据类型（一）String详解"}],["meta",{"property":"og:description","content":"Redis基础数据类型（一）String详解 String概述 Redis没有使用C语言原生的字符串，而是自定义了一种SDS（Simple Dynamic String）的数据结构。 结构如下： SDS的主要特点： 初始化大小 测试成功啦 String数据结构 String命令列表 String应用场景 参考文档"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-25T15:20:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-25T15:20:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis基础数据类型（一）String详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-25T15:20:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小驴哥\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"git":{"createdTime":1748181397000,"updatedTime":1748186438000,"contributors":[{"name":"lvchaoxian","username":"lvchaoxian","email":"lvchaoxian@meituan.com","commits":3,"url":"https://github.com/lvchaoxian"}]},"readingTime":{"minutes":0.73,"words":219},"filePathRelative":"backend/redis/Redis String类型详解.md","localizedDate":"2025年5月25日","excerpt":"\\n<h2>String概述</h2>\\n<p>Redis没有使用C语言原生的字符串，而是自定义了一种SDS（Simple Dynamic String）的数据结构。<br>\\n结构如下：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> __attribute__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ((</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">__packed__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)) sdshdr8 {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    uint8_t</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> len;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* used */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    uint8_t</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> alloc;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* excluding the header and null terminator */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    unsigned</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> flags;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* 3 lsb of type, 5 unused bits */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> buf</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">[]</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> __attribute__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ((</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">__packed__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)) sdshdr16 {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    uint16_t</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> len;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* used */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    uint16_t</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> alloc;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* excluding the header and null terminator */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    unsigned</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> flags;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* 3 lsb of type, 5 unused bits */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> buf</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">[]</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> __attribute__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ((</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">__packed__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)) sdshdr32 {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    uint32_t</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> len;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* used */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    uint32_t</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> alloc;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* excluding the header and null terminator */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    unsigned</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> flags;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* 3 lsb of type, 5 unused bits */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> buf</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">[]</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">};</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">struct</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> __attribute__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ((</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">__packed__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)) sdshdr64 {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    uint64_t</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> len;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* used */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    uint64_t</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> alloc;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* excluding the header and null terminator */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    unsigned</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> flags;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> /* 3 lsb of type, 5 unused bits */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> buf</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">[]</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">};</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,r as data};
